
'use server';
/**
 * @fileOverview A conversational AI assistant for PlotPilot.
 *
 * - chatWithAssistant - A function to interact with the AI assistant.
 * - ChatAssistantInput - The input type for the chatWithAssistant function.
 * - ChatAssistantOutput - The return type for the chatWithAssistant function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define a simple tool for adding a task
const addBusinessTaskTool = ai.defineTool(
  {
    name: 'addBusinessTask',
    description: 'Adds a new task to the business to-do list or captures a reminder. Use this when the user explicitly asks to create a task, note, or reminder.',
    inputSchema: z.object({
      taskDescription: z.string().describe('A detailed description of the task to be added.'),
    }),
    outputSchema: z.string().describe('Confirmation message after attempting to add the task.'),
  },
  async ({taskDescription}) => {
    // In a real application, this would interact with a database or a task management service.
    console.log(`AI Task Added via Tool: ${taskDescription}`);
    return `Okay, I've noted down the task: "${taskDescription}". You can find it in your task list.`;
  }
);

const ChatAssistantInputSchema = z.object({
  userMessage: z.string().describe('The message sent by the user to the AI assistant.'),
});
export type ChatAssistantInput = z.infer<typeof ChatAssistantInputSchema>;

const ChatAssistantOutputSchema = z.object({
  assistantResponse: z.string().describe('The response generated by the AI assistant.'),
});
export type ChatAssistantOutput = z.infer<typeof ChatAssistantOutputSchema>;

export async function chatWithAssistant(input: ChatAssistantInput): Promise<ChatAssistantOutput> {
  return chatAssistantFlow(input);
}

const assistantPrompt = ai.definePrompt({
  name: 'chatAssistantPrompt',
  input: {schema: ChatAssistantInputSchema},
  output: {schema: ChatAssistantOutputSchema},
  tools: [addBusinessTaskTool], // Make the tool available to the AI
  prompt: `You are PlotPilot AI, a friendly and highly intelligent assistant for real estate and property management businesses.
Your goal is to help users grow their business, manage properties efficiently, and streamline operations.

Capabilities:
- Provide business growth ideas and strategies.
- Offer insights on property management best practices.
- Help draft communications (e.g., tenant notices, marketing copy).
- Summarize information if provided.
- If the user asks you to create a task, reminder, or to-do item, use the 'addBusinessTask' tool. Do not confirm if you will use the tool, just use it if appropriate for the user's request.

User Message: {{{userMessage}}}

Assistant Response:
`,
  config: { // Loosen safety settings slightly for more general business conversation
    safetySettings: [
      { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
    ]
  }
});

const chatAssistantFlow = ai.defineFlow(
  {
    name: 'chatAssistantFlow',
    inputSchema: ChatAssistantInputSchema,
    outputSchema: ChatAssistantOutputSchema,
  },
  async (input) => {
    const {output} = await assistantPrompt(input);
    if (!output) {
        return { assistantResponse: "I'm sorry, I couldn't generate a response at this moment." };
    }
    // If the model used a tool, the output might be structured.
    // For this basic chat, we are primarily expecting text, but a tool could have responded.
    // Genkit handles stitching tool output back into the conversation flow for the LLM.
    // The final `output.assistantResponse` should be the text to show the user.
    return { assistantResponse: output.assistantResponse || "I'm not sure how to respond to that. Can you try rephrasing?" };
  }
);
